{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js","components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["btnClasses","styles","button","FeedbackOptions","options","onLeaveFeedback","map","option","className","join","type","onClick","btnText","Statistics","good","neutral","bad","total","positivePercentage","statList","statItem","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","Math","trunc","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+PAGMA,EAAa,CAACC,IAAOC,QAiBZC,EAfS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,mCACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBACEC,UAAWR,EAAWS,KAAK,KAE3BC,KAAK,SACLC,QAAS,kBAAMN,EAAgBE,IAJjC,SAME,sBAAMC,UAAWP,IAAOW,QAAxB,SAAkCL,KAJ7BA,S,gBCQEM,EAdI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,mCACE,qBAAIV,UAAWP,IAAOkB,SAAtB,UACE,qBAAIX,UAAWP,IAAOmB,SAAtB,mBAAuCN,KACvC,qBAAIN,UAAWP,IAAOmB,SAAtB,sBAA0CL,KAC1C,qBAAIP,UAAWP,IAAOmB,SAAtB,kBAAsCJ,EAAtC,OACA,qBAAIR,UAAWP,IAAOmB,SAAtB,oBAAwCH,KACxC,qBAAIT,UAAWP,IAAOmB,SAAtB,gCACsBF,EADtB,cCFSG,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,gCACE,6BAAKD,IACJC,MCDUC,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,6BAAKA,KCIrClB,EAAS,CAAC,OAAQ,UAAW,OAmDpBmB,MAjDf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOb,EAAP,KAAac,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOZ,EAAP,KAAgBc,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOX,EAAP,KAAYc,EAAZ,KAmBMb,EAAQH,EAAOC,EAAUC,EAEzBE,EAAqBa,KAAKC,MAAOlB,EAAOG,EAAS,KAEvD,OACE,qCACE,cAAC,EAAD,CAASK,MAAO,wBAAhB,SACE,cAAC,EAAD,CAAiBlB,QAASG,EAAQF,gBAxBpB,SAACE,GACnB,OAAQA,GACN,IAAK,OACHqB,GAAQ,SAACK,GAAD,OAAeA,EAAY,KACnC,MACF,IAAK,UACHJ,GAAW,SAACI,GAAD,OAAeA,EAAY,KACtC,MACF,IAAK,MACHH,GAAO,SAACG,GAAD,OAAeA,EAAY,KAClC,MAEF,QACE,aAcS,IAAVhB,EACC,cAAC,EAAD,CAAcQ,QAAS,sBAEvB,cAAC,EAAD,CAASH,MAAO,aAAhB,SACE,cAAC,EAAD,CACER,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,UCrCjBgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,SAAW,6BAA6B,SAAW,+B,kBCArED,EAAOC,QAAU,CAAC,OAAS,gCAAgC,QAAU,oC","file":"static/js/main.c4fdff06.chunk.js","sourcesContent":["import React from \"react\";\nimport styles from \"../FeedbackOptions/FeedbackOptions.module.css\";\n\nconst btnClasses = [styles.button];\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <>\n    {options.map((option) => (\n      <button\n        className={btnClasses.join(\" \")}\n        key={option}\n        type=\"button\"\n        onClick={() => onLeaveFeedback(option)}\n      >\n        <span className={styles.btnText}>{option}</span>\n      </button>\n    ))}\n  </>\n);\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Statistics.module.css\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <>\n    <ul className={styles.statList}>\n      <li className={styles.statItem}>Good: {good}</li>\n      <li className={styles.statItem}>Neutral: {neutral}</li>\n      <li className={styles.statItem}>Bad: {bad} </li>\n      <li className={styles.statItem}>Total: {total}</li>\n      <li className={styles.statItem}>\n        Positive feedback: {positivePercentage} %\n      </li>\n    </ul>\n  </>\n);\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import React from \"react\";\n\nconst Section = ({ title, children }) => (\n  <div>\n    <h3>{title}</h3>\n    {children}\n  </div>\n);\n\nexport default Section;\n","import React from \"react\";\n\nconst Notification = ({ message }) => <h2>{message}</h2>;\n\nexport default Notification;\n","import { useState } from \"react\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Section from \"./components/Section/Section\";\nimport Notification from \"./components/Notification/Notification\";\n\nconst option = [\"good\", \"neutral\", \"bad\"];\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleClick = (option) => {\n    switch (option) {\n      case \"good\":\n        setGood((prevState) => prevState + 1);\n        break;\n      case \"neutral\":\n        setNeutral((prevState) => prevState + 1);\n        break;\n      case \"bad\":\n        setBad((prevState) => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const total = good + neutral + bad;\n\n  const positivePercentage = Math.trunc((good / total) * 100);\n\n  return (\n    <>\n      <Section title={\"Please leave feedback\"}>\n        <FeedbackOptions options={option} onLeaveFeedback={handleClick} />\n      </Section>\n\n      {total === 0 ? (\n        <Notification message={\"No feedback given\"} />\n      ) : (\n        <Section title={\"Statistics\"}>\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        </Section>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statList\":\"Statistics_statList__3Tc3y\",\"statItem\":\"Statistics_statItem__3GDh2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__2JDwe\",\"btnText\":\"FeedbackOptions_btnText__3Tyh5\"};"],"sourceRoot":""}